
            {* Data structure - Stack *}
            { Implementing float 'stack operation (push, pop, top, size, empty) with limited size (100,000) }
            var g_stack: array [1 .. 100000] of real;
            var sp, size: integer;

            { Stack initialization
              MUST be called before doing any stack operations }
            procedure s_init();
            begin
                sp := 1;
                size := 100000;
            end
            { Push an element into stack
              Return 0 when succeeded, -1 otherwise (stack overflow) }
            function s_push(x: real): integer;
            begin
                if (sp > size) then return -1;

                g_stack[sp] := x;
                sp := sp + 1;
                return 0;
            end
            { Pop an element out of the stack
              Return 0 when succeeded, -1 otherwise (stack underflow) }
            function s_pop(): integer;
            begin
                if (sp < 1) then return -1;

                sp := sp - 1;
                return 0;
            end
            { Get the top element of the stack
              Only call when the stack is not empty - otherwise can cause runtime error }
            function s_top(): real;
            begin
                return g_stack[sp - 1];
            end
            { Check the stack size }
            function s_size(): integer;
            begin
                return size;
            end
            { Check if the stack is empty }
            function s_empty(): boolean;
            begin
                if (sp > 1) and then (sp <= size) then return false;
                else return true;
            end
        